on:
  push:
    branches:
      - master
      - main
  pull_request:


name: R-CMD-check

defaults:
  run:
    shell: Rscript {0}

jobs:
  R-CMD-check:
    name: R-${{ matrix.r }}
    strategy:
      fail-fast: false
      matrix:
        include:

          - {r: '3.6'} # default R in ubuntu-20.04
          - {r: '3.5'}
          - {r: '3.4'}


    runs-on: ubuntu-latest
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: 'true'
      R_COMPILE_AND_INSTALL_PACKAGES: 'never'
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Configure RSPM
        if: runner.os == 'Linux'
        shell: bash
        run: |
          RSPM="https://packagemanager.rstudio.com/all/__linux__/$(lsb_release -cs)/latest"
          echo "RSPM=$RSPM" >> $GITHUB_ENV

      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        id: setup-r
        with:
          r-version: ${{ matrix.r }}
          Ncpus: '2L'
          crayon.enabled: 'TRUE'

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Install remotes
        if: steps.r-package-cache.outputs.cache-hit != 'true'
        run: install.packages("remotes")

      - name: Install system dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          . /etc/os-release
          while read -r cmd
          do
            echo "$cmd"
            sudo $cmd
          done < <(Rscript -e "writeLines(remotes::system_requirements('$ID-$VERSION_ID'))")

      - name: Install Package + deps
        run: remotes::install_local(dependencies = TRUE, force = TRUE)

      - name: Install rcmdcheck
        run: remotes::install_cran("rcmdcheck")

      - name: Workaround knitr regression
        run: remotes::install_version("knitr", "1.30") 

      - name: Check
        run: rcmdcheck::rcmdcheck(args = '--no-manual', error_on = 'warning', check_dir = 'check')

      - name: Show testthat output
        if: always()
        shell: bash
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
